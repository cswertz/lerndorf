yarn run v1.22.4
$ rm -rf test.sqlite && NODE_ENV=test sequelize db:migrate && NODE_ENV=test sequelize db:seed:all && SERVER_PORT=9999 NODE_ENV=test nyc mocha --require server/config/babelHook.js --timeout 10000 --exit

[4mSequelize CLI [Node: 12.16.2, CLI: 6.2.0, ORM: 6.3.4][24m

Loaded configuration file "server/config/babelHook.js".
Using environment "test".
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00010-Roles: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Roles` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `slug` VARCHAR(255) NOT NULL UNIQUE, `name` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00010-Roles: migrated (0.024s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00020-Users: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) NOT NULL UNIQUE, `email` VARCHAR(255) NOT NULL UNIQUE, `privacyLevelLog` INTEGER REFERENCES `Taxonomies` (`id`), `privacyLevelProfile` INTEGER REFERENCES `Taxonomies` (`id`), `password` VARCHAR(255) NOT NULL, `firstName` VARCHAR(255), `lastName` VARCHAR(255), `titlePrefix` VARCHAR(255), `titleSuffix` VARCHAR(255), `birthdate` DATETIME, `studyId` VARCHAR(255), `phone` VARCHAR(255), `street` VARCHAR(255), `zip` VARCHAR(255), `city` VARCHAR(255), `state` VARCHAR(255), `country` VARCHAR(255), `website` VARCHAR(255), `picture` VARCHAR(255) DEFAULT NULL, `description` TEXT, `lastLogin` DATETIME, `acceptPrivacy` TINYINT(1) NOT NULL DEFAULT 0, `acceptTos` TINYINT(1) NOT NULL DEFAULT 0, `allowBasicLog` TINYINT(1) NOT NULL DEFAULT 0, `allowLogResearch` TINYINT(1) NOT NULL DEFAULT 0, `allowLogSharing` TINYINT(1) NOT NULL DEFAULT 0, `allowLogReports` TINYINT(1) NOT NULL DEFAULT 0, `showProfilePublic` TINYINT(1) NOT NULL DEFAULT 0, `showProfileStudents` TINYINT(1) NOT NULL DEFAULT 0, `showProfileTeachers` TINYINT(1) NOT NULL DEFAULT 0, `activationCode` VARCHAR(255), `active` TINYINT(1) NOT NULL DEFAULT 0, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00020-Users: migrated (0.012s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00030-UserRole: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `UserRole` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `RoleId` INTEGER NOT NULL REFERENCES `Roles` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00030-UserRole: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00040-Capabilities: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Capabilities` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `slug` VARCHAR(255) NOT NULL UNIQUE, `name` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00040-Capabilities: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00050-RoleCapability: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `RoleCapability` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `RoleId` INTEGER NOT NULL REFERENCES `Roles` (`id`) ON DELETE CASCADE, `CapabilityId` INTEGER NOT NULL REFERENCES `Capabilities` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00050-RoleCapability: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00060-Languages: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Languages` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `code` VARCHAR(255) NOT NULL UNIQUE, `name` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00060-Languages: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00065-CapabilityLanguage: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `CapabilityLanguage` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `CapabilityId` INTEGER NOT NULL REFERENCES `Capabilities` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `vocable` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00065-CapabilityLanguage: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00067-RoleLanguage: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `RoleLanguage` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `RoleId` INTEGER NOT NULL REFERENCES `Roles` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `vocable` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00067-RoleLanguage: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00070-UserLanguage: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `UserLanguage` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `level` INTEGER NOT NULL DEFAULT 0, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00070-UserLanguage: migrated (0.014s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00080-Files: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Files` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `path` VARCHAR(255) NOT NULL UNIQUE, `name` VARCHAR(255) NOT NULL, `mime` VARCHAR(255) NOT NULL, `size` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00080-Files: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00090-Taxonomies: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Taxonomies` (`id` INTEGER PRIMARY KEY, `parent` INTEGER REFERENCES `Taxonomies` (`id`) ON DELETE CASCADE, `active` TINYINT(1) DEFAULT 1, `type` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00090-Taxonomies: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00100-TaxonomyLanguage: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `TaxonomyLanguage` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `TaxonomyId` INTEGER NOT NULL REFERENCES `Taxonomies` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `vocable` VARCHAR(255) NOT NULL DEFAULT 0, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00100-TaxonomyLanguage: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00110-LearningUnits: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `LearningUnits` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00110-LearningUnits: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00120-LearningUnitLanguage: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `LearningUnitLanguage` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `LearningUnitId` INTEGER NOT NULL REFERENCES `LearningUnits` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE CASCADE, `title` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): SELECT sql FROM sqlite_master WHERE tbl_name='LearningUnitLanguage';
Executing (default): PRAGMA TABLE_INFO(`LearningUnitLanguage`);
Executing (default): PRAGMA INDEX_LIST(`LearningUnitLanguage`)
Executing (default): PRAGMA foreign_key_list(LearningUnitLanguage)
Executing (default): CREATE TABLE `LearningUnitLanguage_backup` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `LearningUnitId` INTEGER NOT NULL REFERENCES `LearningUnits` (`id`) ON DELETE CASCADE, `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE CASCADE, `title` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, CONSTRAINT `indexname` UNIQUE (`title`, `LanguageId`));
Executing (default): INSERT INTO `LearningUnitLanguage_backup` SELECT `id`, `LearningUnitId`, `LanguageId`, `UserId`, `title`, `createdAt`, `updatedAt` FROM `LearningUnitLanguage`;
Executing (default): DROP TABLE `LearningUnitLanguage`;
Executing (default): ALTER TABLE `LearningUnitLanguage_backup` RENAME TO `LearningUnitLanguage`;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00120-LearningUnitLanguage: migrated (0.025s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00130-LearningUnitRelation: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `LearningUnitRelation` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `sourceId` INTEGER NOT NULL REFERENCES `LearningUnits` (`id`) ON DELETE CASCADE, `targetId` INTEGER NOT NULL REFERENCES `LearningUnits` (`id`) ON DELETE CASCADE, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE CASCADE, `type` INTEGER REFERENCES `Taxonomies` (`id`), `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00130-LearningUnitRelation: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00140-KnowledgeUnits: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `KnowledgeUnits` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `LearningUnitId` INTEGER NOT NULL REFERENCES `LearningUnits` (`id`) ON DELETE CASCADE, `rootId` INTEGER REFERENCES `LearningUnits` (`id`), `nextId` INTEGER REFERENCES `LearningUnits` (`id`), `prevId` INTEGER REFERENCES `LearningUnits` (`id`), `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `mediaType` INTEGER REFERENCES `Taxonomies` (`id`), `knowledgeType` INTEGER REFERENCES `Taxonomies` (`id`), `objectType` INTEGER REFERENCES `Taxonomies` (`id`), `eqfLevel` INTEGER REFERENCES `Taxonomies` (`id`), `courseLevel` INTEGER REFERENCES `Taxonomies` (`id`), `license` INTEGER REFERENCES `Taxonomies` (`id`), `minimumScreenResolution` INTEGER REFERENCES `Taxonomies` (`id`), `suitableBlind` TINYINT(1) NOT NULL DEFAULT 0, `suitableDeaf` TINYINT(1) NOT NULL DEFAULT 0, `suitableDumb` TINYINT(1) NOT NULL DEFAULT 0, `publish` TINYINT(1) NOT NULL DEFAULT 1, `review` TINYINT(1) NOT NULL DEFAULT 0, `lectorate` TINYINT(1) NOT NULL DEFAULT 0, `visiblePublic` TINYINT(1) NOT NULL DEFAULT 0, `visibleLexicon` TINYINT(1) NOT NULL DEFAULT 0, `visibleCourses` TINYINT(1) NOT NULL DEFAULT 0, `time` INTEGER, `objective` TEXT, `comment` TEXT, `recommendedAge` INTEGER, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00140-KnowledgeUnits: migrated (0.010s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00150-KnowledgeUnitUser: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `KnowledgeUnitUser` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `KnowledgeUnitId` INTEGER NOT NULL REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00150-KnowledgeUnitUser: migrated (0.009s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00160-LearningUnitTag: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `LearningUnitTag` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `LearningUnitLanguageId` INTEGER NOT NULL REFERENCES `LearningUnitLanguage` (`id`) ON DELETE CASCADE, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `tag` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00160-LearningUnitTag: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00170-KnowledgeUnitUserRating: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `KnowledgeUnitUserRating` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `KnowledgeUnitId` INTEGER NOT NULL REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `rating` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00170-KnowledgeUnitUserRating: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00180-KnowledgeUnitUserLog: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `KnowledgeUnitUserLog` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `KnowledgeUnitId` INTEGER NOT NULL REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00180-KnowledgeUnitUserLog: migrated (0.007s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00190-Texts: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `Texts` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `rootId` INTEGER REFERENCES `Texts` (`id`), `prevId` INTEGER REFERENCES `Texts` (`id`), `nextId` INTEGER REFERENCES `Texts` (`id`), `LanguageId` INTEGER NOT NULL REFERENCES `Languages` (`id`) ON DELETE CASCADE, `KnowledgeUnitId` INTEGER NOT NULL REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `content` TEXT NOT NULL, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00190-Texts: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00200-TextFile: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `TextFile` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `TextId` INTEGER NOT NULL REFERENCES `Texts` (`id`) ON DELETE CASCADE, `FileId` INTEGER NOT NULL REFERENCES `Files` (`id`) ON DELETE CASCADE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00200-TextFile: migrated (0.008s)

Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
== 00210-LogUser: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS `LogUser` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER NOT NULL REFERENCES `Users` (`id`) ON DELETE CASCADE, `KnowledgeUnitId` INTEGER REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `LearningUnitId` INTEGER REFERENCES `KnowledgeUnits` (`id`) ON DELETE CASCADE, `mode` VARCHAR(255) NOT NULL, `navigationTool` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
Executing (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1);
== 00210-LogUser: migrated (0.009s)


[4mSequelize CLI [Node: 12.16.2, CLI: 6.2.0, ORM: 6.3.4][24m

Loaded configuration file "server/config/babelHook.js".
Using environment "test".
Executing (default): SELECT 1+1 AS result
== 00010-Roles: migrating =======
Executing (default): INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,'admin','Admin','2020-11-04 09:53:42.058 +00:00','2020-11-04 09:53:42.058 +00:00'),(NULL,'guest','Guest','2020-11-04 09:53:42.058 +00:00','2020-11-04 09:53:42.058 +00:00'),(NULL,'user','User','2020-11-04 09:53:42.058 +00:00','2020-11-04 09:53:42.058 +00:00'),(NULL,'editor','Editor','2020-11-04 09:53:42.058 +00:00','2020-11-04 09:53:42.058 +00:00'),(NULL,'lector','Lector','2020-11-04 09:53:42.058 +00:00','2020-11-04 09:53:42.058 +00:00');
== 00010-Roles: migrated (0.101s)

== 00020-Users: migrating =======
Executing (default): INSERT INTO `Users` (`username`,`password`,`email`,`active`,`createdAt`,`updatedAt`) VALUES ('admin','$2a$08$J4aqYME43XRnZLCa0/FBU.TRTtb1ofVrBKsXyxdxBY6rL2FG915Xu','admin@example.com',1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00020-Users: migrated (0.004s)

== 00030-UserRole: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): SELECT * FROM `Roles` WHERE `Roles`.`slug` = 'admin';
Executing (default): INSERT INTO `UserRole` (`UserId`,`RoleId`,`createdAt`,`updatedAt`) VALUES (1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00030-UserRole: migrated (0.005s)

== 00040-Capabilities: migrating =======
Executing (default): INSERT INTO `Capabilities` (`slug`,`name`,`createdAt`,`updatedAt`) VALUES ('edit_user','Edit User',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_user','Delete User',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_self','Delete Self',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_admin_role_to_user','Add Admin Role to Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_editor_role_to_user','Add Editor Role to Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_lector_role_to_user','Add Lector Role to Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_admin_role_from_user','Delete Admin Role from Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_editor_role_from_user','Delete Editor Role from Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_lector_role_from_user','Delete Lector Role from Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_role_to_user','Add Role to User',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_role_from_user','Delete Role from User',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_role','Add Role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('edit_role','Edit Role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_role','Delete Role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_capability_to_role','Add Capability to Role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('remove_capability_from_role','Remove Capability from Role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_file','Add File',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_any_file','Delete Any File',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_taxonomy','Add Taxonomy',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('edit_taxonomy','Edit Taxonomy',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_language','Add Language',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('edit_language','Edit Language',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_language','Delete Language',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_taxonomy','Delete Taxonomy',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_knowledge_unit','Add Knowledge Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('edit_any_knowledge_unit','Edit Any Knowledge Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_knowledge_unit_version','Add a new version of a Knowledge Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('set_knowledge_unit_reviewed','Mark a Knowledge Unit as reviewed',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('set_knowledge_unit_lectored','Mark a Knowledge Unit as lectored',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('view_non_public_knowledge_unit','View non public Knowledge Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('add_learning_unit','Add Learning Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('edit_any_learning_unit','Edit Any Learning Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('delete_any_learning_unit','Delete Any Learning Unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00040-Capabilities: migrated (0.004s)

== 00050-RoleCapability: migrating =======
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'admin';
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'guest';
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'user';
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'editor';
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'lector';
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` IN (NULL);
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` IN ('add_file', 'add_knowledge_unit', 'add_knowledge_unit_version', 'add_learning_unit', 'delete_self');
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` IN ('edit_user', 'delete_user', 'add_admin_role_to_user', 'add_editor_role_to_user', 'add_lector_role_to_user', 'delete_admin_role_from_user', 'delete_editor_role_from_user', 'delete_lector_role_from_user', 'add_role', 'edit_role', 'delete_role', 'add_capability_to_role', 'remove_capability_from_role', 'add_file', 'delete_any_file', 'add_taxonomy', 'edit_taxonomy', 'delete_taxonomy', 'add_language', 'edit_language', 'delete_language', 'add_knowledge_unit', 'edit_any_knowledge_unit', 'add_knowledge_unit_version', 'set_knowledge_unit_reviewed', 'set_knowledge_unit_lectored', 'view_non_public_knowledge_unit', 'add_learning_unit', 'edit_any_learning_unit', 'delete_any_learning_unit', 'add_role_to_user', 'delete_role_from_user', 'delete_self');
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` IN ('set_knowledge_unit_lectored', 'delete_editor_role_from_user');
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` IN ('delete_lector_role_from_user', 'set_knowledge_unit_lectored', 'set_knowledge_unit_reviewed');
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 5 AND `RoleCapability`.`CapabilityId` IN (9, 29, 28);
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 1 AND `RoleCapability`.`CapabilityId` IN (4, 15, 5, 17, 25, 27, 21, 31, 6, 12, 10, 19, 7, 18, 33, 8, 23, 9, 14, 11, 3, 24, 2, 26, 32, 22, 13, 20, 1, 16, 29, 28, 30);
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 2 AND `RoleCapability`.`CapabilityId` IN (NULL);
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 4 AND `RoleCapability`.`CapabilityId` IN (8, 29);
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 3 AND `RoleCapability`.`CapabilityId` IN (17, 25, 27, 31, 3);
Executing (default): INSERT INTO `RoleCapability` (`createdAt`,`updatedAt`,`CapabilityId`,`RoleId`) VALUES ('2020-11-04 09:53:42.100 +00:00','2020-11-04 09:53:42.100 +00:00',9,5),('2020-11-04 09:53:42.100 +00:00','2020-11-04 09:53:42.100 +00:00',29,5),('2020-11-04 09:53:42.100 +00:00','2020-11-04 09:53:42.100 +00:00',28,5);
Executing (default): INSERT INTO `RoleCapability` (`createdAt`,`updatedAt`,`CapabilityId`,`RoleId`) VALUES ('2020-11-04 09:53:42.101 +00:00','2020-11-04 09:53:42.101 +00:00',17,3),('2020-11-04 09:53:42.101 +00:00','2020-11-04 09:53:42.101 +00:00',25,3),('2020-11-04 09:53:42.101 +00:00','2020-11-04 09:53:42.101 +00:00',27,3),('2020-11-04 09:53:42.101 +00:00','2020-11-04 09:53:42.101 +00:00',31,3),('2020-11-04 09:53:42.101 +00:00','2020-11-04 09:53:42.101 +00:00',3,3);
Executing (default): INSERT INTO `RoleCapability` (`createdAt`,`updatedAt`,`CapabilityId`,`RoleId`) VALUES ('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',4,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',15,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',5,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',17,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',25,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',27,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',21,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',31,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',6,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',12,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',10,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',19,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',7,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',18,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',33,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',8,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',23,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',9,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',14,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',11,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',3,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',24,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',2,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',26,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',32,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',22,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',13,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',20,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',1,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',16,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',29,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',28,1),('2020-11-04 09:53:42.102 +00:00','2020-11-04 09:53:42.102 +00:00',30,1);
Executing (default): INSERT INTO `RoleCapability` (`createdAt`,`updatedAt`,`CapabilityId`,`RoleId`) VALUES ('2020-11-04 09:53:42.105 +00:00','2020-11-04 09:53:42.105 +00:00',8,4),('2020-11-04 09:53:42.105 +00:00','2020-11-04 09:53:42.105 +00:00',29,4);
== 00050-RoleCapability: migrated (0.033s)

== 00060-Languages: migrating =======
Executing (default): INSERT INTO `Languages` (`code`,`name`,`createdAt`,`updatedAt`) VALUES ('en','English',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),('de','German',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00060-Languages: migrated (0.005s)

== 00065-CapabilityLanguage: migrating =======
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_self';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_self';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_admin_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_admin_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_editor_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_editor_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_lector_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_lector_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_admin_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_admin_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_editor_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_editor_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_lector_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_lector_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_role_to_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_role_from_user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_capability_to_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_capability_to_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'remove_capability_from_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'remove_capability_from_role';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_file';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_file';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_any_file';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_any_file';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'delete_taxonomy';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_any_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_any_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_knowledge_unit_version';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_knowledge_unit_version';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'set_knowledge_unit_reviewed';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'set_knowledge_unit_reviewed';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'set_knowledge_unit_lectored';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'set_knowledge_unit_lectored';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'set_knowledge_unit_reviewed';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'view_non_public_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'view_non_public_knowledge_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_learning_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'add_learning_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_any_learning_unit';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Capabilities` AS `Capability` WHERE `Capability`.`slug` = 'edit_any_learning_unit';
Executing (default): INSERT INTO `CapabilityLanguage` (`RoleId`,`LanguageId`,`vocable`,`createdAt`,`updatedAt`) VALUES (1,1,'edit accounts',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(1,2,'BenutzerInnenkonten bearbeiten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,1,'Delete Users',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,2,'BenuterInnenkonten löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,1,'delete own account',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,2,'Eigenes Konto löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,1,'grant admin rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,2,'Administrationsrechte vergeben',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,1,'grant author rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,2,'AutorInnenrechte vergeben',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(6,1,'grant reviewer rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(6,2,'GutachterInnenrechte vergeben',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(7,1,'delete admin rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(7,2,'Administrationsrechte löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(8,1,'delete author rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(8,2,'AutorInnerechte löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(9,1,'delete reviewer rights',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(9,2,'GutachterInnenrechte löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(10,1,'add role to own account',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(10,2,'Rolle einem Konto hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(11,1,'delete role from own account',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(11,2,'Rolle aus eigenem Konto löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(12,1,'add role to accounts',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(12,2,'Rolle zu Konto hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(13,1,'edit roles of accounts',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(13,2,'Rollen eines Kontos bearbeiten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(14,1,'delete roles of accounts',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(14,2,'Rollen eines Kontos löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(15,1,'add capability to role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(15,2,'Fähigkeit zu Rollen hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(16,1,'delete capability from role',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(16,2,'Fähigkeiten von Rollen entfernen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(17,1,'add file',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(17,2,'Datei hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(18,1,'delete any file',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(18,2,'jede Datei löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(19,1,'add taxonomy entry',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(19,2,'Taxonomieeintrag hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(20,1,'edit taxonomy',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(20,2,'Taxonomie bearbeiten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(24,1,'delete taxonomy entry',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(24,2,'Taxonomieentrag löschen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(25,1,'add knwoledge unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(25,2,'Wissenseinheit hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(26,1,'edit any knowledge unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(26,2,'alle Wissenseinheite bearbeiten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(27,1,'add knowledge unit version',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(27,2,'neue Version einer Wissenseinheit hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(28,1,'set knowledge unit to reviewed',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(28,2,'Wisseneinheit als begutachter markieren',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(29,1,'set knowledge unit to copy edited',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(29,2,'Wissenseinheit als lektoriert markieren',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(28,1,'set knowledge unit to reviewed',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(30,1,'view non public knowledge unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(30,2,'nicht öffentliche Wissenseinheit anzeigen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(31,1,'add learning unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(31,2,'Lerneinheit hinzufügen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(32,1,'edit any learning unit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(32,2,'jede Lerneinheit beabeiten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00065-CapabilityLanguage: migrated (0.073s)

== 00067-RoleLanguage: migrating =======
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'admin';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'admin';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'guest';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'guest';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'user';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'editor';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'editor';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'lector';
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Roles` AS `Role` WHERE `Role`.`slug` = 'lector';
Executing (default): INSERT INTO `RoleLanguage` (`RoleId`,`LanguageId`,`vocable`,`createdAt`,`updatedAt`) VALUES (1,1,'admin',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(1,2,'AdministratorIn',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,1,'guest',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,2,'Gast',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,1,'user',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,2,'BenutzerIn',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,1,'author',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,2,'AutorIn',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,1,'Reviewer',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,2,'GutachterIn',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00067-RoleLanguage: migrated (0.012s)

== 00070-UserLanguage: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): SELECT * FROM `Languages` WHERE `Languages`.`code` = 'en';
Executing (default): INSERT INTO `UserLanguage` (`UserId`,`LanguageId`,`createdAt`,`updatedAt`) VALUES (1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00070-UserLanguage: migrated (0.006s)

== 00080-Files: migrating =======
Executing (default): INSERT INTO `Files` (`path`,`name`,`mime`,`size`,`createdAt`,`updatedAt`) VALUES ('uploads/image_1.png','Some Image','image/png','1234',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00080-Files: migrated (0.003s)

== 00090-Taxonomies: migrating =======
Executing (default): INSERT INTO `Taxonomies` (`id`,`type`,`active`,`parent`,`createdAt`) VALUES (1,'taxonomies',1,1,CURRENT_TIMESTAMP),(2,'mediaType',1,1,CURRENT_TIMESTAMP),(3,'presentation',1,2,CURRENT_TIMESTAMP),(4,'animation',1,3,CURRENT_TIMESTAMP),(5,'audio',1,3,CURRENT_TIMESTAMP),(6,'photo',1,3,CURRENT_TIMESTAMP),(7,'drawing',1,3,CURRENT_TIMESTAMP),(8,'table',1,3,CURRENT_TIMESTAMP),(9,'text',1,3,CURRENT_TIMESTAMP),(10,'video',1,3,CURRENT_TIMESTAMP),(11,'communication',1,2,CURRENT_TIMESTAMP),(12,'asynchronous',1,11,CURRENT_TIMESTAMP),(13,'forum',1,12,CURRENT_TIMESTAMP),(14,'interaction',1,2,CURRENT_TIMESTAMP),(15,'form',1,14,CURRENT_TIMESTAMP),(16,'interactiveVideo',1,15,CURRENT_TIMESTAMP),(17,'knowledgeType',1,1,CURRENT_TIMESTAMP),(18,'receptive',1,17,CURRENT_TIMESTAMP),(19,'orientation',1,18,CURRENT_TIMESTAMP),(20,'facts',1,19,CURRENT_TIMESTAMP),(21,'history',1,19,CURRENT_TIMESTAMP),(22,'overview',1,19,CURRENT_TIMESTAMP),(23,'knowledgeMap',1,19,CURRENT_TIMESTAMP),(24,'abstract',1,19,CURRENT_TIMESTAMP),(25,'scenario',1,19,CURRENT_TIMESTAMP),(26,'story',1,24,CURRENT_TIMESTAMP),(27,'virtualWorld',1,24,CURRENT_TIMESTAMP),(28,'explanation',1,18,CURRENT_TIMESTAMP),(29,'argument',1,28,CURRENT_TIMESTAMP),(30,'example',1,28,CURRENT_TIMESTAMP),(31,'description',1,28,CURRENT_TIMESTAMP),(32,'interview',1,28,CURRENT_TIMESTAMP),(33,'definition',1,28,CURRENT_TIMESTAMP),(34,'action',1,18,CURRENT_TIMESTAMP),(35,'instructions',1,34,CURRENT_TIMESTAMP),(36,'checklist',1,34,CURRENT_TIMESTAMP),(37,'rule',1,34,CURRENT_TIMESTAMP),(38,'strategy',1,34,CURRENT_TIMESTAMP),(39,'source',1,18,CURRENT_TIMESTAMP),(40,'source',1,18,CURRENT_TIMESTAMP),(41,'links',1,40,CURRENT_TIMESTAMP),(42,'literature',1,40,CURRENT_TIMESTAMP),(43,'downloads',1,40,CURRENT_TIMESTAMP),(44,'interactive',1,17,CURRENT_TIMESTAMP),(45,'multipleChoice',1,44,CURRENT_TIMESTAMP),(46,'simulation',1,44,CURRENT_TIMESTAMP),(47,'cooperation',1,17,CURRENT_TIMESTAMP),(48,'plannedCooperation',1,47,CURRENT_TIMESTAMP),(49,'discussion',1,48,CURRENT_TIMESTAMP),(50,'brainstorming',1,48,CURRENT_TIMESTAMP),(51,'problemsolving',1,48,CURRENT_TIMESTAMP),(52,'consultationHour',1,48,CURRENT_TIMESTAMP),(53,'spontanouesCooperation',1,47,CURRENT_TIMESTAMP),(54,'communityCommunication',1,53,CURRENT_TIMESTAMP),(55,'questionToTeacher',1,53,CURRENT_TIMESTAMP),(56,'relationType',1,1,CURRENT_TIMESTAMP),(57,'hierarchical',1,56,CURRENT_TIMESTAMP),(58,'genericize',1,57,CURRENT_TIMESTAMP),(59,'consistsOf',1,57,CURRENT_TIMESTAMP),(60,'associative',1,57,CURRENT_TIMESTAMP),(61,'beside',1,60,CURRENT_TIMESTAMP),(62,'oppositeOf',1,60,CURRENT_TIMESTAMP),(63,'chronologicalBefore',1,60,CURRENT_TIMESTAMP),(64,'chronologicalAfter',1,60,CURRENT_TIMESTAMP),(65,'licences',1,1,CURRENT_TIMESTAMP),(66,'cc',1,65,CURRENT_TIMESTAMP),(67,'cc-by',1,66,CURRENT_TIMESTAMP),(68,'cc-by-sa',1,66,CURRENT_TIMESTAMP),(69,'cc-by-nd',1,66,CURRENT_TIMESTAMP),(70,'cc-by-nc',1,66,CURRENT_TIMESTAMP),(71,'cc-by-sa-nc',1,66,CURRENT_TIMESTAMP),(72,'cc-by-nd-nc',1,66,CURRENT_TIMESTAMP),(73,'gnu',1,65,CURRENT_TIMESTAMP),(74,'gnu-gpl',1,73,CURRENT_TIMESTAMP),(75,'gnu-lgpl',1,73,CURRENT_TIMESTAMP),(76,'gnu-agpl',1,73,CURRENT_TIMESTAMP),(77,'gnu-fdl',1,73,CURRENT_TIMESTAMP),(78,'pd',1,65,CURRENT_TIMESTAMP),(79,'c',1,65,CURRENT_TIMESTAMP),(80,'courseLevel',1,1,CURRENT_TIMESTAMP),(81,'beginner',1,80,CURRENT_TIMESTAMP),(82,'intermediate',1,80,CURRENT_TIMESTAMP),(83,'advanced',1,80,CURRENT_TIMESTAMP),(84,'minimumScreenResolution',1,1,CURRENT_TIMESTAMP),(85,'16-9-M',1,84,CURRENT_TIMESTAMP),(86,'16-9-L',1,84,CURRENT_TIMESTAMP),(87,'16-9-XL',1,84,CURRENT_TIMESTAMP),(88,'4-3-XS',1,84,CURRENT_TIMESTAMP),(89,'4-3-S',1,84,CURRENT_TIMESTAMP),(90,'4-3-M',1,84,CURRENT_TIMESTAMP),(91,'4-3-L',1,84,CURRENT_TIMESTAMP),(92,'4-3-XL',1,84,CURRENT_TIMESTAMP),(93,'eqflevel',1,1,CURRENT_TIMESTAMP),(94,'eqf1',1,93,CURRENT_TIMESTAMP),(95,'eqf2',1,93,CURRENT_TIMESTAMP),(96,'eqf3',1,93,CURRENT_TIMESTAMP),(97,'eqf4',1,93,CURRENT_TIMESTAMP),(98,'eqf5',1,93,CURRENT_TIMESTAMP),(99,'eqf6',1,93,CURRENT_TIMESTAMP),(100,'eqf7',1,93,CURRENT_TIMESTAMP),(101,'eqf8',1,93,CURRENT_TIMESTAMP);
== 00090-Taxonomies: migrated (0.006s)

== 00100-TaxonomyLanguage: migrating =======
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'taxonomies' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'taxonomies' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'mediaType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'mediaType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'presentation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'presentation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'animation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'animation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'audio' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'audio' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'photo' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'photo' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'drawing' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'drawing' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'table' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'table' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'text' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'text' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'video' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'video' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'communication' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'communication' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'asynchronous' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'asynchronous' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'forum' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'forum' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interaction' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interaction' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'form' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'form' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interactiveVideo' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interactiveVideo' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'knowledgeType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'knowledgeType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'receptive' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'receptive' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'orientation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'orientation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'facts' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'facts' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'history' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'history' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'overview' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'overview' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'knowledgeMap' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'knowledgeMap' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'abstract' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'abstract' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'scenario' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'scenario' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'story' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'story' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'virtualWorld' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'virtualWorld' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'explanation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'explanation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'argument' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'argument' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'example' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'example' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'description' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'description' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interview' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interview' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'definition' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'definition' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'action' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'action' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'instructions' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'instructions' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'checklist' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'checklist' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'rule' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'rule' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'strategy' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'strategy' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'source' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'source' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'links' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'links' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'literature' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'literature' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'downloads' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'downloads' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interactive' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'interactive' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'multipleChoice' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'multipleChoice' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'simulation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'simulation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'plannedCooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'plannedCooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'discussion' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'discussion' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'brainstorming' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'brainstorming' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'problemsolving' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'problemsolving' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'consultationHour' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'consultationHour' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'spontanouesCooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'spontanouesCooperation' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'communityCommunication' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'communityCommunication' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'questionToTeacher' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'questionToTeacher' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'relationType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'relationType' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'hierarchical' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'hierarchical' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'genericize' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'genericize' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'consistsOf' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'consistsOf' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'associative' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'associative' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'beside' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'beside' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'oppositeOf' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'oppositeOf' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'chronologicalBefore' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'chronologicalBefore' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'chronologicalAfter' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'chronologicalAfter' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'licences' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'licences' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-sa' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-sa' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-nd' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-nd' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-nc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-nc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-sa-nc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'cc-by-sa-nc' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-gpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-gpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-lgpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-lgpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-agpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-agpl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-fdl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'gnu-fdl' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'pd' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'pd' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'c' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'c' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'courseLevel' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'courseLevel' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'beginner' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'beginner' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'intermediate' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'intermediate' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'advanced' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'advanced' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'minimumScreenResolution' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'minimumScreenResolution' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-M' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-M' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-L' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-L' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-XL' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '16-9-XL' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-XS' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-XS' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-S' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-S' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-M' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-M' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-L' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-L' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-XL' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = '4-3-XL' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf1' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf1' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf2' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf2' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf3' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf3' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf4' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf4' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf5' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf5' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf6' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf6' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf7' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf7' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'en';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf8' LIMIT 1;
Executing (default): SELECT `id` FROM `Languages` AS `Language` WHERE `Language`.`code` = 'de';
Executing (default): SELECT `id` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`type` = 'eqf8' LIMIT 1;
Executing (default): INSERT INTO `TaxonomyLanguage` (`TaxonomyId`,`LanguageId`,`vocable`,`createdAt`,`updatedAt`) VALUES (1,1,'Taxonomies',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(1,2,'Taxonomien',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,1,'MediaType',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,2,'Medientyp',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,1,'Presentation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(3,2,'Darstellung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,1,'Animation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(4,2,'Animation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,1,'audio',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(5,2,'Audio',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(6,1,'Photo',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(6,2,'Foto',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(7,1,'Drawing',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(7,2,'Zeichnung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(8,1,'Table',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(8,2,'Tabelle',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(9,1,'Text',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(9,2,'Text',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(10,1,'Video',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(10,2,'Video',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(11,1,'Communication',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(11,2,'Kommunikation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(12,1,'Asynchronous Communication',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(12,2,'Asynchrone Kommunikation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(13,1,'Forum',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(13,2,'Forum',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(14,1,'Interaction',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(14,2,'Interaktion',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(15,1,'Form',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(15,2,'Formular',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(16,1,'Interactive Video',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(16,2,'Interaktives Video',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(17,1,'Knowledge Type',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(17,2,'Wissensart',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(18,1,'Receptive Knowledge Types',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(18,2,'Rezeptive Wissensarten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(19,1,'Orientation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(19,2,'Orientierung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(20,1,'Facts',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(20,2,'Fakten',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(21,1,'Historical Event',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(21,2,'Geschichtliches Ereignis',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(22,1,'Overview',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(22,2,'Überblick',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(23,1,'Knowledge Map',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(23,2,'Wissenslandkarte',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(24,1,'Abstract',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(24,2,'Kurzfassung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(25,1,'Scenario',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(25,2,'Szenario',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(26,1,'Story',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(26,2,'Geschichte',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(27,1,'Virtual World',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(27,2,'Virtuelle Welt',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(28,1,'Explanation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(28,2,'Erklärung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(29,1,'Argument',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(29,2,'Argument',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(30,1,'Example',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(30,2,'Beispiel',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(31,1,'Description',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(31,2,'Beschreibung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(32,1,'Interview',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(32,2,'Interview',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(33,1,'Definition',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(33,2,'Definition',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(34,1,'Action Knowledge',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(34,2,'Handlungswissen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(35,1,'Instructions',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(35,2,'Anleitung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(36,1,'Checklist',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(36,2,'Checkliste',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(37,1,'Rule',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(37,2,'Regel',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(38,1,'Strategy',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(38,2,'Strategie',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(39,1,'Source Knowledge',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(39,2,'Quellenwissen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(41,1,'Website',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(41,2,'Webseite',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(42,1,'Literature',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(42,2,'Literatur',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(43,1,'Downloads',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(43,2,'Downloads',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(44,1,'Interactive Knowledge',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(44,2,'Interaktives Wissen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(45,1,'Multiple Choice Question',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(45,2,'Multiple Choice Frage',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(46,1,'Simulation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(46,2,'Simulation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(47,1,'Cooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(47,2,'Kooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(48,1,'Planned Cooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(48,2,'Geplante Kooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(49,1,'Siscussion',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(49,2,'Diskussion',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(50,1,'Brainstorming',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(50,2,'Brainstorming',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(51,1,'Problem Solving Task',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(51,2,'Problemlösungsaufgabe',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(52,1,'Consultation Hour',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(52,2,'Sprechstunde',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(53,1,'Spontanoues Cooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(53,2,'Spontante Kooperation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(54,1,'Community Communication',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(54,2,'Gruppenkommunikation',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(55,1,'Question to Teacher',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(55,2,'Frage an Lehrende',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(56,1,'Relation Type',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(56,2,'Relationstyp',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(57,1,'hierarchical',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(57,2,'hierarchisch',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(58,1,'genericize',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(58,2,'allgemeiner',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(59,1,'consists of',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(59,2,'ist Teil von',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(60,1,'is associated with',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(60,2,'is assoziiert mit',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(61,1,'is beside of',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(61,2,'ist neben',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(62,1,'is the opposite of',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(62,2,'ist das Gegenteil von',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(63,1,'is chronological before',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(63,2,'ist zeitlich vor',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(64,1,'is chronological after',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(64,2,'ist zeitlich nach',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(65,1,'Licences',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(65,2,'Lizenzen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(66,1,'Creative Commons Licenses',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(66,2,'Creative Commons Lizenzen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(67,1,'cc-by',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(67,2,'cc-by',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(68,1,'cc-by-sa',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(68,2,'cc-by-sa',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(69,1,'cc-by-nd',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(69,2,'cc-by-nd',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(70,1,'cc-by-nc',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(70,2,'cc-by-nc',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(71,1,'cc-by-sa-nc',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(71,2,'cc-by-sa-nc',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(73,1,'GNU Licenses',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(73,2,'GNU Lizenzen',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(74,1,'gnu-gpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(74,2,'gnu-gpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(75,1,'gnu-lgpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(75,2,'gnu-lgpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(76,1,'gnu-agpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(76,2,'gnu-agpl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(77,1,'gnu-fdl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(77,2,'gnu-fdl',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(78,1,'Public Domain',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(78,2,'Gemeinfrei',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(79,1,'Copyright',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(79,2,'Urheberrechtlich geschützt',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(80,1,'Difficulty Level',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(80,2,'Schwierigkeitsgrad',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(81,1,'low',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(81,2,'niedrig',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(82,1,'normal',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(82,2,'mittel',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(83,1,'high',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(83,2,'schwierig',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(84,1,'Minimum Screen Resolution',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(84,2,'Minimale Bildschirmauflösung',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(85,1,'16-9-M',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(85,2,'16-9-M',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(86,1,'16-9-L',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(86,2,'16-9-L',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(87,1,'16-9-XL',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(87,2,'16-9-XL',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(88,1,'4-3-XS',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(88,2,'4-3-XS',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(89,1,'4-3-S',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(89,2,'4-3-S',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(90,1,'4-3-M',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(90,2,'4-3-M',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(91,1,'4-3-L',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(91,2,'4-3-L',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(92,1,'4-3-XL',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(92,2,'4-3-XL',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(94,1,'European Qualification Framework Level 1',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(94,2,'European Qualification Framework Level 1',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(95,1,'European Qualification Framework Level 2',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(95,2,'European Qualification Framework Level 2',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(96,1,'European Qualification Framework Level 3',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(96,2,'European Qualification Framework Level 3',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(97,1,'European Qualification Framework Level 4',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(97,2,'European Qualification Framework Level 4',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(98,1,'European Qualification Framework Level 5',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(98,2,'European Qualification Framework Level 5',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(99,1,'European Qualification Framework Level 6',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(99,2,'European Qualification Framework Level 6',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(100,1,'European Qualification Framework Level 7',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(100,2,'European Qualification Framework Level 7',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(101,1,'European Qualification Framework Level 8',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(101,2,'European Qualification Framework Level 8',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00100-TaxonomyLanguage: migrated (0.208s)

== 00110-LearningUnits: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `LearningUnits` (`id`,`UserId`,`createdAt`) VALUES (1,1,CURRENT_TIMESTAMP),(2,1,CURRENT_TIMESTAMP);
== 00110-LearningUnits: migrated (0.006s)

== 00120-LearningUnitLanguage: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): SELECT * FROM `Languages` WHERE `Languages`.`code` = 'en';
Executing (default): INSERT INTO `LearningUnitLanguage` (`LearningUnitId`,`LanguageId`,`UserId`,`title`,`createdAt`,`updatedAt`) VALUES (1,1,1,'Title for Learning Unit #1',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP),(2,1,1,'Title for Learning Unit #2',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00120-LearningUnitLanguage: migrated (0.004s)

== 00130-LearningUnitRelation: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `LearningUnitRelation` (`sourceId`,`targetId`,`UserId`,`createdAt`) VALUES (1,2,1,CURRENT_TIMESTAMP);
== 00130-LearningUnitRelation: migrated (0.004s)

== 00140-KnowledgeUnits: migrating =======
Executing (default): INSERT INTO `KnowledgeUnits` (`LearningUnitId`,`UserId`,`createdAt`) VALUES (1,1,CURRENT_TIMESTAMP);
== 00140-KnowledgeUnits: migrated (0.005s)

== 00150-KnowledgeUnitUser: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `KnowledgeUnitUser` (`KnowledgeUnitId`,`UserId`,`createdAt`) VALUES (1,1,CURRENT_TIMESTAMP);
== 00150-KnowledgeUnitUser: migrated (0.002s)

== 00160-LearningUnitTag: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `LearningUnitTag` (`LearningUnitLanguageId`,`UserId`,`tag`,`createdAt`) VALUES (1,1,'some Tag',CURRENT_TIMESTAMP);
== 00160-LearningUnitTag: migrated (0.004s)

== 00170-KnowledgeUnitUserRating: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `KnowledgeUnitUserRating` (`KnowledgeUnitId`,`UserId`,`rating`,`createdAt`) VALUES (1,1,5,CURRENT_TIMESTAMP);
== 00170-KnowledgeUnitUserRating: migrated (0.004s)

== 00180-KnowledgeUnitUserLog: migrating =======
Executing (default): SELECT * FROM `Users` WHERE `Users`.`username` = 'admin';
Executing (default): INSERT INTO `KnowledgeUnitUserLog` (`KnowledgeUnitId`,`UserId`,`createdAt`,`updatedAt`) VALUES (1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00180-KnowledgeUnitUserLog: migrated (0.005s)

== 00190-Texts: migrating =======
Executing (default): INSERT INTO `Texts` (`LanguageId`,`KnowledgeUnitId`,`content`,`createdAt`) VALUES (1,1,'Content comes here',CURRENT_TIMESTAMP);
== 00190-Texts: migrated (0.004s)

== 00200-TextFile: migrating =======
Executing (default): INSERT INTO `TextFile` (`TextId`,`FileId`,`createdAt`,`updatedAt`) VALUES (1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
== 00200-TextFile: migrated (0.003s)

== 00210-LogUser: migrating =======
Executing (default): INSERT INTO `LogUser` (`UserId`,`mode`,`navigationTool`,`createdAt`) VALUES (1,'mode','navi',CURRENT_TIMESTAMP);
== 00210-LogUser: migrated (0.003s)

/home/chris/work/lerndorf/server/server
info: Listening on port: 9999


  Capability
    GET /api/capabilities
Executing (default): SELECT `id`, `slug`, `name` FROM `Capabilities` AS `Capability`;
      ✓ it should GET all the capabilities

  File
    GET /api/files
Executing (default): DELETE FROM `Files`; DELETE FROM `sqlite_sequence` WHERE `name` = 'Files';
Executing (default): SELECT `id`, `createdAt`, `updatedAt` FROM `Files` AS `File`;
      ✓ it should GET all the files
    POST /api/files
      ✓ it should display an error when required fields are missing
Executing (default): INSERT INTO `Files` (`id`,`path`,`name`,`mime`,`size`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6);
      ✓ it should add a new File
Executing (default): INSERT INTO `Files` (`id`,`path`,`name`,`mime`,`size`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6);
      ✓ it should not add the same File twice
Executing (default): INSERT INTO `Files` (`id`,`path`,`name`,`mime`,`size`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6);
      ✓ it should add a different File
    GET /api/files/:id
Executing (default): SELECT `id`, `createdAt`, `updatedAt` FROM `Files` AS `File` WHERE `File`.`id` = '2';
      ✓ it should display File information
    PATCH /api/files/:id
Executing (default): SELECT `id`, `createdAt`, `updatedAt` FROM `Files` AS `File` WHERE `File`.`id` = '2';
      ✓ it should allow an empty patch
    DELETE /api/files/:id
Executing (default): DELETE FROM `Files` WHERE `id` = '2'
      ✓ it should be possible to delete a File

  KnowledgeUnit
Executing (default): DELETE FROM `KnowledgeUnits`; DELETE FROM `sqlite_sequence` WHERE `name` = 'KnowledgeUnits';
Executing (default): DELETE FROM `LearningUnits`; DELETE FROM `sqlite_sequence` WHERE `name` = 'LearningUnits';
Executing (default): INSERT INTO `LearningUnits` (`id`,`createdAt`) VALUES (NULL,$1);
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_knowlwdgeunit';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@knowledgeunit.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
    GET /api/knowledgeUnits
Executing (default): SELECT `KnowledgeUnit`.`id`, `KnowledgeUnit`.`createdAt`, `Users`.`id` AS `Users.id`, `Users`.`username` AS `Users.username`, `Users->KnowledgeUnitUser`.`createdAt` AS `Users.KnowledgeUnitUser.createdAt`, `Users->KnowledgeUnitUser`.`KnowledgeUnitId` AS `Users.KnowledgeUnitUser.KnowledgeUnitId`, `Users->KnowledgeUnitUser`.`UserId` AS `Users.KnowledgeUnitUser.UserId` FROM `KnowledgeUnits` AS `KnowledgeUnit` LEFT OUTER JOIN `KnowledgeUnitUser` AS `Users->KnowledgeUnitUser` ON `KnowledgeUnit`.`id` = `Users->KnowledgeUnitUser`.`KnowledgeUnitId` LEFT OUTER JOIN `Users` AS `Users` ON `Users`.`id` = `Users->KnowledgeUnitUser`.`UserId` WHERE `KnowledgeUnit`.`visiblePublic` = 1;
      ✓ it should GET all the knowledgeUnits
    GET /api/knowledgeUnits/taxonomies
Executing (default): SELECT `Taxonomy`.`id`, `Taxonomy`.`type`, `Parent`.`id` AS `Parent.id`, `Parent`.`type` AS `Parent.type` FROM `Taxonomies` AS `Taxonomy` LEFT OUTER JOIN `Taxonomies` AS `Parent` ON `Taxonomy`.`parent` = `Parent`.`id` WHERE `Parent`.`type` IN ('eqflevel', 'mediaType', 'knowledgeType', 'courseLevel', 'licences', 'minimumScreenResolution');
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 3;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 11;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 14;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 18;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 44;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 47;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 66;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 73;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 78;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 79;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 81;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 82;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 83;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 85;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 86;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 87;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 88;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 89;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 90;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 91;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 92;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 94;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 95;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 96;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 97;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 98;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 99;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 100;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 101;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 4;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 5;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 6;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 7;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 8;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 9;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 10;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 45;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 46;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 48;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 53;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 67;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 68;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 69;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 70;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 71;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 72;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 12;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 15;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 19;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 28;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 34;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 39;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 40;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 74;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 75;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 76;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 77;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 49;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 50;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 51;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 52;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 54;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 55;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 13;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 16;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 20;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 21;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 22;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 23;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 24;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 25;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 29;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 30;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 31;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 32;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 33;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 35;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 36;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 37;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 38;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 41;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 42;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 43;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 26;
Executing (default): SELECT `id`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 27;
      ✓ it should GET all the relevant taxonomies for adding a knowledge Unit (51ms)
    POST /api/knowledgeUnits
      ✓ it should not be possible to add a Knowledge Unit when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_knowlwdgeunit' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
      ✓ it should not allow a user without the proper permissions to add a Knowledge Unit (59ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a Knowledge Unit without required fields (81ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `KnowledgeUnits` (`id`,`LearningUnitId`,`UserId`,`suitableBlind`,`suitableDeaf`,`suitableDumb`,`publish`,`review`,`lectorate`,`visiblePublic`,`visibleLexicon`,`visibleCourses`,`createdAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12);
      ✓ it should allow a user with the proper permissions to add a Knowledge Unit (68ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `KnowledgeUnits` (`id`,`LearningUnitId`,`UserId`,`suitableBlind`,`suitableDeaf`,`suitableDumb`,`publish`,`review`,`lectorate`,`visiblePublic`,`visibleLexicon`,`visibleCourses`,`createdAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12);
      ✓ it should allow a user with the proper permissions to add a different Knowledge Unit (78ms)
    GET /api/knowledgeUnits/:id
Executing (default): SELECT `KnowledgeUnit`.`id`, `KnowledgeUnit`.`comment`, `KnowledgeUnit`.`objective`, `KnowledgeUnit`.`time`, `KnowledgeUnit`.`recommendedAge`, `KnowledgeUnit`.`visibleCourses`, `KnowledgeUnit`.`visibleLexicon`, `KnowledgeUnit`.`visiblePublic`, `KnowledgeUnit`.`lectorate`, `KnowledgeUnit`.`review`, `KnowledgeUnit`.`publish`, `KnowledgeUnit`.`suitableDumb`, `KnowledgeUnit`.`suitableDeaf`, `KnowledgeUnit`.`suitableBlind`, `msr`.`id` AS `msr.id`, `msr`.`type` AS `msr.type`, `kt`.`id` AS `kt.id`, `kt`.`type` AS `kt.type`, `cl`.`id` AS `cl.id`, `cl`.`type` AS `cl.type`, `ot`.`id` AS `ot.id`, `ot`.`type` AS `ot.type`, `mt`.`id` AS `mt.id`, `mt`.`type` AS `mt.type`, `el`.`id` AS `el.id`, `el`.`type` AS `el.type`, `l`.`id` AS `l.id`, `l`.`type` AS `l.type`, `author`.`id` AS `author.id`, `author`.`username` AS `author.username`, `Texts`.`id` AS `Texts.id`, `Texts`.`content` AS `Texts.content`, `Texts`.`nextId` AS `Texts.nextId`, `Texts`.`prevId` AS `Texts.prevId`, `Texts`.`rootId` AS `Texts.rootId`, `Texts->Language`.`id` AS `Texts.Language.id`, `Texts->Language`.`code` AS `Texts.Language.code`, `Texts->Language`.`name` AS `Texts.Language.name` FROM `KnowledgeUnits` AS `KnowledgeUnit` LEFT OUTER JOIN `Taxonomies` AS `msr` ON `KnowledgeUnit`.`minimumScreenResolution` = `msr`.`id` LEFT OUTER JOIN `Taxonomies` AS `kt` ON `KnowledgeUnit`.`knowledgeType` = `kt`.`id` LEFT OUTER JOIN `Taxonomies` AS `cl` ON `KnowledgeUnit`.`courseLevel` = `cl`.`id` LEFT OUTER JOIN `Taxonomies` AS `ot` ON `KnowledgeUnit`.`objectType` = `ot`.`id` LEFT OUTER JOIN `Taxonomies` AS `mt` ON `KnowledgeUnit`.`mediaType` = `mt`.`id` LEFT OUTER JOIN `Taxonomies` AS `el` ON `KnowledgeUnit`.`eqfLevel` = `el`.`id` LEFT OUTER JOIN `Taxonomies` AS `l` ON `KnowledgeUnit`.`license` = `l`.`id` LEFT OUTER JOIN `Users` AS `author` ON `KnowledgeUnit`.`UserId` = `author`.`id` LEFT OUTER JOIN `Texts` AS `Texts` ON `KnowledgeUnit`.`id` = `Texts`.`KnowledgeUnitId` AND `Texts`.`nextId` IS NULL LEFT OUTER JOIN `Languages` AS `Texts->Language` ON `Texts`.`LanguageId` = `Texts->Language`.`id` WHERE `KnowledgeUnit`.`id` = '3';
      ✓ it should display KnowledgeUnit information
    PATCH /api/knowledgeUnits/markLectored:id
      ✓ it should not be possible to add mark a Knowledge Unit lectored when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_knowlwdgeunit' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
      ✓ it should not allow a user without the proper permissions to mark a Knowledge Unit lectored (61ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): UPDATE `KnowledgeUnits` SET `lectorate`=$1 WHERE `id` = $2
      ✓ it should allow a user with the proper permissions to mark a Knowledge Unit lectored (68ms)
    PATCH /api/knowledgeUnits/markReviewed:id
      ✓ it should not be possible to add mark a Knowledge Unit reviewed when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_knowlwdgeunit' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
      ✓ it should not allow a user without the proper permissions to add a Knowledge Unit (71ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 2;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 2;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): UPDATE `KnowledgeUnits` SET `review`=$1 WHERE `id` = $2
      ✓ it should allow a user with the proper permissions to mark a Knowledge Unit reviewed (64ms)
    DELETE /api/knowledgeUnits/:id
Executing (default): DELETE FROM `KnowledgeUnits` WHERE `id` = '3'
      ✓ it should be possible to delete a KnowledgeUnit

  Language
Executing (default): DELETE FROM `Languages`; DELETE FROM `sqlite_sequence` WHERE `name` = 'Languages';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_language';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@language.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
    GET /api/languages
Executing (default): SELECT `id`, `createdAt`, `updatedAt`, `code`, `name` FROM `Languages` AS `Language`;
      ✓ it should GET all the languages
    POST /api/languages
      ✓ it should not be possible to add a Language when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a language without required fields (61ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a language without code field (63ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a language without name field (63ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Languages` (`id`,`code`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a new language (65ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Languages` (`id`,`code`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should not add the same Language twice (63ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Languages` (`id`,`code`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should add a different Language (69ms)
    GET /api/languages/:id
Executing (default): SELECT `id`, `createdAt`, `updatedAt` FROM `Languages` AS `Language` WHERE `Language`.`id` = '4';
      ✓ it should display Language information
    PATCH /api/languages/:id
      ✓ it should not be possible to edit a language when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_language' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 3;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 3;
      ✓ it should not allow a user without the proper permissions to edit a language (57ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 3;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 3;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): UPDATE `Languages` SET `name`=$1,`updatedAt`=$2 WHERE `id` = $3
Executing (default): SELECT `id`, `createdAt`, `updatedAt` FROM `Languages` AS `Language` WHERE `Language`.`id` = '4';
      ✓ it should allow a user with the proper permissions to edit a language (61ms)
    DELETE /api/languages/:id
      ✓ it should not be possible to delete a Language when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_language' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 3;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 3;
      ✓ it should not allow a user without the proper permissions to delete a taxonomy (58ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 3;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 3;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): DELETE FROM `Languages` WHERE `id` = '4'
      ✓ it should allow a user with the proper permissions to delete a taxonomy (63ms)

  LearningUnit
Executing (default): DELETE FROM `LearningUnits`; DELETE FROM `sqlite_sequence` WHERE `name` = 'LearningUnits';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_learningunit';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@learningunit.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
    GET /api/learningUnits
Executing (default): SELECT `LearningUnit`.`id`, `LearningUnit`.`createdAt`, `User`.`id` AS `User.id`, `User`.`username` AS `User.username`, `Languages`.`id` AS `Languages.id`, `Languages`.`code` AS `Languages.code`, `Languages`.`name` AS `Languages.name`, `Languages->LearningUnitLanguage`.`id` AS `Languages.LearningUnitLanguage.id`, `Languages->LearningUnitLanguage`.`title` AS `Languages.LearningUnitLanguage.title` FROM `LearningUnits` AS `LearningUnit` LEFT OUTER JOIN `Users` AS `User` ON `LearningUnit`.`UserId` = `User`.`id` LEFT OUTER JOIN `LearningUnitLanguage` AS `Languages->LearningUnitLanguage` ON `LearningUnit`.`id` = `Languages->LearningUnitLanguage`.`LearningUnitId` LEFT OUTER JOIN `Languages` AS `Languages` ON `Languages`.`id` = `Languages->LearningUnitLanguage`.`LanguageId`;
      ✓ it should GET all the learningUnits
    POST /api/learningUnits
      ✓ it should not be possible to add a knowledgeUnit when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_learningunit' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 4;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 4;
      ✓ it should not allow a user without the proper permissions to add a role (54ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 4;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 4;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a Learning Unit without required fields (65ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `LearningUnitId`, `LanguageId`, `UserId`, `title`, `createdAt`, `updatedAt` FROM `LearningUnitLanguage` AS `LearningUnitLanguage` WHERE `LearningUnitLanguage`.`LanguageId` = 3 AND `LearningUnitLanguage`.`title` = 'Testing';
Executing (default): INSERT INTO `LearningUnits` (`id`,`createdAt`,`UserId`) VALUES (NULL,$1,$2);
LearningUnit {
  dataValues: { id: 4, UserId: 1, createdAt: 2020-11-04T09:53:47.321Z },
  _previousDataValues: { UserId: 1, id: 4, createdAt: 2020-11-04T09:53:47.321Z },
  _changed: Set {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false
}
Executing (default): INSERT INTO `LearningUnitLanguage` (`id`,`LearningUnitId`,`LanguageId`,`UserId`,`title`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6);
      ✓ it should allow a user with the proper permissions to add a learningUnit (69ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `LearningUnitId`, `LanguageId`, `UserId`, `title`, `createdAt`, `updatedAt` FROM `LearningUnitLanguage` AS `LearningUnitLanguage` WHERE `LearningUnitLanguage`.`LanguageId` = 3 AND `LearningUnitLanguage`.`title` = 'Testing 1';
Executing (default): INSERT INTO `LearningUnits` (`id`,`createdAt`,`UserId`) VALUES (NULL,$1,$2);
LearningUnit {
  dataValues: { id: 5, UserId: 1, createdAt: 2020-11-04T09:53:47.388Z },
  _previousDataValues: { UserId: 1, id: 5, createdAt: 2020-11-04T09:53:47.388Z },
  _changed: Set {},
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false
}
Executing (default): INSERT INTO `LearningUnitLanguage` (`id`,`LearningUnitId`,`LanguageId`,`UserId`,`title`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6);
      ✓ it should allow a user with the proper permissions to add a different learningUnit (66ms)
    GET /api/learningUnits/:id
Executing (default): SELECT `LearningUnitLanguage`.`id`, `LearningUnitLanguage`.`title`, `LearningUnitTags`.`id` AS `LearningUnitTags.id`, `LearningUnitTags`.`tag` AS `LearningUnitTags.tag`, `User`.`id` AS `User.id`, `User`.`username` AS `User.username`, `Language`.`id` AS `Language.id`, `Language`.`code` AS `Language.code`, `Language`.`name` AS `Language.name`, `LearningUnit`.`id` AS `LearningUnit.id`, `LearningUnit->User`.`id` AS `LearningUnit.User.id`, `LearningUnit->User`.`username` AS `LearningUnit.User.username`, `LearningUnit->KnowledgeUnits`.`id` AS `LearningUnit.KnowledgeUnits.id`, `LearningUnit->KnowledgeUnits`.`comment` AS `LearningUnit.KnowledgeUnits.comment`, `LearningUnit->KnowledgeUnits`.`objective` AS `LearningUnit.KnowledgeUnits.objective`, `LearningUnit->KnowledgeUnits`.`time` AS `LearningUnit.KnowledgeUnits.time`, `LearningUnit->KnowledgeUnits`.`recommendedAge` AS `LearningUnit.KnowledgeUnits.recommendedAge`, `LearningUnit->KnowledgeUnits`.`visibleCourses` AS `LearningUnit.KnowledgeUnits.visibleCourses`, `LearningUnit->KnowledgeUnits`.`visibleLexicon` AS `LearningUnit.KnowledgeUnits.visibleLexicon`, `LearningUnit->KnowledgeUnits`.`visiblePublic` AS `LearningUnit.KnowledgeUnits.visiblePublic`, `LearningUnit->KnowledgeUnits`.`lectorate` AS `LearningUnit.KnowledgeUnits.lectorate`, `LearningUnit->KnowledgeUnits`.`review` AS `LearningUnit.KnowledgeUnits.review`, `LearningUnit->KnowledgeUnits`.`publish` AS `LearningUnit.KnowledgeUnits.publish`, `LearningUnit->KnowledgeUnits`.`suitableDumb` AS `LearningUnit.KnowledgeUnits.suitableDumb`, `LearningUnit->KnowledgeUnits`.`suitableDeaf` AS `LearningUnit.KnowledgeUnits.suitableDeaf`, `LearningUnit->KnowledgeUnits`.`suitableBlind` AS `LearningUnit.KnowledgeUnits.suitableBlind`, `LearningUnit->KnowledgeUnits->msr`.`id` AS `LearningUnit.KnowledgeUnits.msr.id`, `LearningUnit->KnowledgeUnits->msr`.`type` AS `LearningUnit.KnowledgeUnits.msr.type`, `LearningUnit->KnowledgeUnits->kt`.`id` AS `LearningUnit.KnowledgeUnits.kt.id`, `LearningUnit->KnowledgeUnits->kt`.`type` AS `LearningUnit.KnowledgeUnits.kt.type`, `LearningUnit->KnowledgeUnits->cl`.`id` AS `LearningUnit.KnowledgeUnits.cl.id`, `LearningUnit->KnowledgeUnits->cl`.`type` AS `LearningUnit.KnowledgeUnits.cl.type`, `LearningUnit->KnowledgeUnits->ot`.`id` AS `LearningUnit.KnowledgeUnits.ot.id`, `LearningUnit->KnowledgeUnits->ot`.`type` AS `LearningUnit.KnowledgeUnits.ot.type`, `LearningUnit->KnowledgeUnits->mt`.`id` AS `LearningUnit.KnowledgeUnits.mt.id`, `LearningUnit->KnowledgeUnits->mt`.`type` AS `LearningUnit.KnowledgeUnits.mt.type`, `LearningUnit->KnowledgeUnits->el`.`id` AS `LearningUnit.KnowledgeUnits.el.id`, `LearningUnit->KnowledgeUnits->el`.`type` AS `LearningUnit.KnowledgeUnits.el.type`, `LearningUnit->KnowledgeUnits->l`.`id` AS `LearningUnit.KnowledgeUnits.l.id`, `LearningUnit->KnowledgeUnits->l`.`type` AS `LearningUnit.KnowledgeUnits.l.type`, `LearningUnit->KnowledgeUnits->author`.`id` AS `LearningUnit.KnowledgeUnits.author.id`, `LearningUnit->KnowledgeUnits->author`.`username` AS `LearningUnit.KnowledgeUnits.author.username`, `LearningUnit->KnowledgeUnits->Texts`.`id` AS `LearningUnit.KnowledgeUnits.Texts.id`, `LearningUnit->KnowledgeUnits->Texts`.`content` AS `LearningUnit.KnowledgeUnits.Texts.content`, `LearningUnit->KnowledgeUnits->Texts`.`nextId` AS `LearningUnit.KnowledgeUnits.Texts.nextId`, `LearningUnit->KnowledgeUnits->Texts`.`prevId` AS `LearningUnit.KnowledgeUnits.Texts.prevId`, `LearningUnit->KnowledgeUnits->Texts`.`rootId` AS `LearningUnit.KnowledgeUnits.Texts.rootId`, `LearningUnit->KnowledgeUnits->Texts->Language`.`id` AS `LearningUnit.KnowledgeUnits.Texts.Language.id`, `LearningUnit->KnowledgeUnits->Texts->Language`.`code` AS `LearningUnit.KnowledgeUnits.Texts.Language.code`, `LearningUnit->KnowledgeUnits->Texts->Language`.`name` AS `LearningUnit.KnowledgeUnits.Texts.Language.name` FROM `LearningUnitLanguage` AS `LearningUnitLanguage` LEFT OUTER JOIN `LearningUnitTag` AS `LearningUnitTags` ON `LearningUnitLanguage`.`id` = `LearningUnitTags`.`LearningUnitLanguageId` LEFT OUTER JOIN `Users` AS `User` ON `LearningUnitLanguage`.`UserId` = `User`.`id` LEFT OUTER JOIN `Languages` AS `Language` ON `LearningUnitLanguage`.`LanguageId` = `Language`.`id` LEFT OUTER JOIN `LearningUnits` AS `LearningUnit` ON `LearningUnitLanguage`.`LearningUnitId` = `LearningUnit`.`id` LEFT OUTER JOIN `Users` AS `LearningUnit->User` ON `LearningUnit`.`UserId` = `LearningUnit->User`.`id` LEFT OUTER JOIN `KnowledgeUnits` AS `LearningUnit->KnowledgeUnits` ON `LearningUnit`.`id` = `LearningUnit->KnowledgeUnits`.`LearningUnitId` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->msr` ON `LearningUnit->KnowledgeUnits`.`minimumScreenResolution` = `LearningUnit->KnowledgeUnits->msr`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->kt` ON `LearningUnit->KnowledgeUnits`.`knowledgeType` = `LearningUnit->KnowledgeUnits->kt`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->cl` ON `LearningUnit->KnowledgeUnits`.`courseLevel` = `LearningUnit->KnowledgeUnits->cl`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->ot` ON `LearningUnit->KnowledgeUnits`.`objectType` = `LearningUnit->KnowledgeUnits->ot`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->mt` ON `LearningUnit->KnowledgeUnits`.`mediaType` = `LearningUnit->KnowledgeUnits->mt`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->el` ON `LearningUnit->KnowledgeUnits`.`eqfLevel` = `LearningUnit->KnowledgeUnits->el`.`id` LEFT OUTER JOIN `Taxonomies` AS `LearningUnit->KnowledgeUnits->l` ON `LearningUnit->KnowledgeUnits`.`license` = `LearningUnit->KnowledgeUnits->l`.`id` LEFT OUTER JOIN `Users` AS `LearningUnit->KnowledgeUnits->author` ON `LearningUnit->KnowledgeUnits`.`UserId` = `LearningUnit->KnowledgeUnits->author`.`id` LEFT OUTER JOIN `Texts` AS `LearningUnit->KnowledgeUnits->Texts` ON `LearningUnit->KnowledgeUnits`.`id` = `LearningUnit->KnowledgeUnits->Texts`.`KnowledgeUnitId` AND `LearningUnit->KnowledgeUnits->Texts`.`nextId` IS NULL LEFT OUTER JOIN `Languages` AS `LearningUnit->KnowledgeUnits->Texts->Language` ON `LearningUnit->KnowledgeUnits->Texts`.`LanguageId` = `LearningUnit->KnowledgeUnits->Texts->Language`.`id` WHERE `LearningUnitLanguage`.`LearningUnitId` = '5' ORDER BY `LearningUnit->KnowledgeUnits`.`id` ASC, `LearningUnit->KnowledgeUnits->Texts`.`id` ASC;
      ✓ it should display LearningUnit information
    DELETE /api/learningUnits/:id
xxxxxxxxxxxxxxxxx
5
xxxxxxxxxxxxxxxxx
      1) it should not be possible to delete a Learning unit when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_learningunit' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 4;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 4;
      2) it should not allow a user without the proper permissions to delete a learning Unit
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 4;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 4;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      3) it should allow a user with the proper permissions to delete a learning Unit

  Role
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_role';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@role.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
    GET /api/roles
Executing (default): SELECT `Role`.`id`, `Role`.`name`, `Role`.`slug`, `Role`.`createdAt`, `Role`.`updatedAt`, `Languages`.`id` AS `Languages.id`, `Languages`.`code` AS `Languages.code`, `Languages`.`name` AS `Languages.name`, `Languages->RoleLanguage`.`id` AS `Languages.RoleLanguage.id`, `Languages->RoleLanguage`.`vocable` AS `Languages.RoleLanguage.vocable` FROM `Roles` AS `Role` LEFT OUTER JOIN `RoleLanguage` AS `Languages->RoleLanguage` ON `Role`.`id` = `Languages->RoleLanguage`.`RoleId` LEFT OUTER JOIN `Languages` AS `Languages` ON `Languages`.`id` = `Languages->RoleLanguage`.`LanguageId`;
      ✓ it should GET all the roles
    POST /api/roles
      ✓ it should not be possible to add a Role when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_role' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
      ✓ it should not allow a user without the proper permissions to add a role (56ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a role without required fields (61ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a role (83ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
UniqueConstraintError [SequelizeUniqueConstraintError]: Validation error
    at Query.formatError (/home/chris/work/lerndorf/server/node_modules/sequelize/lib/dialects/sqlite/query.js:409:16)
    at Query._handleQueryResponse (/home/chris/work/lerndorf/server/node_modules/sequelize/lib/dialects/sqlite/query.js:72:18)
    at Statement.afterExecute (/home/chris/work/lerndorf/server/node_modules/sequelize/lib/dialects/sqlite/query.js:246:27) {
  name: 'SequelizeUniqueConstraintError',
  errors: [
    ValidationErrorItem {
      message: 'slug must be unique',
      type: 'unique violation',
      path: 'slug',
      value: 'edit_users_test',
      origin: 'DB',
      instance: [Role],
      validatorKey: 'not_unique',
      validatorName: null,
      validatorArgs: []
    }
  ],
  fields: [ 'slug' ],
  parent: [Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: Roles.slug] {
    errno: 19,
    code: 'SQLITE_CONSTRAINT',
    sql: 'INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);'
  },
  original: [Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: Roles.slug] {
    errno: 19,
    code: 'SQLITE_CONSTRAINT',
    sql: 'INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);'
  },
  sql: 'INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);'
}
      ✓ it should not allow a user with the proper permissions to add a role twice (67ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Roles` (`id`,`slug`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a different role (68ms)
    GET /api/roles/:id
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `Capabilities`.`id` AS `Capabilities.id`, `Capabilities`.`slug` AS `Capabilities.slug`, `Capabilities`.`name` AS `Capabilities.name`, `Languages`.`id` AS `Languages.id`, `Languages`.`code` AS `Languages.code`, `Languages`.`name` AS `Languages.name`, `Languages->RoleLanguage`.`id` AS `Languages.RoleLanguage.id`, `Languages->RoleLanguage`.`vocable` AS `Languages.RoleLanguage.vocable` FROM `Roles` AS `Role` LEFT OUTER JOIN `RoleCapability` AS `Capabilities->RoleCapability` ON `Role`.`id` = `Capabilities->RoleCapability`.`RoleId` LEFT OUTER JOIN `Capabilities` AS `Capabilities` ON `Capabilities`.`id` = `Capabilities->RoleCapability`.`CapabilityId` LEFT OUTER JOIN `RoleLanguage` AS `Languages->RoleLanguage` ON `Role`.`id` = `Languages->RoleLanguage`.`RoleId` LEFT OUTER JOIN `Languages` AS `Languages` ON `Languages`.`id` = `Languages->RoleLanguage`.`LanguageId` WHERE `Role`.`id` = '6';
      ✓ it should display Role information
    PATCH /api/roles/:id
      ✓ it should not be possible to edit a role when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_role' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
      ✓ it should not allow a user without the proper permissions to edit a taxonomy (62ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): UPDATE `Roles` SET `name`=$1,`updatedAt`=$2 WHERE `id` = $3
Executing (default): SELECT `Role`.`id`, `Role`.`name`, `Role`.`slug`, `Role`.`createdAt`, `Role`.`updatedAt`, `Languages`.`id` AS `Languages.id`, `Languages`.`code` AS `Languages.code`, `Languages`.`name` AS `Languages.name`, `Languages->RoleLanguage`.`id` AS `Languages.RoleLanguage.id`, `Languages->RoleLanguage`.`vocable` AS `Languages.RoleLanguage.vocable` FROM `Roles` AS `Role` LEFT OUTER JOIN `RoleLanguage` AS `Languages->RoleLanguage` ON `Role`.`id` = `Languages->RoleLanguage`.`RoleId` LEFT OUTER JOIN `Languages` AS `Languages` ON `Languages`.`id` = `Languages->RoleLanguage`.`LanguageId` WHERE `Role`.`id` = '6';
      ✓ it should allow a user with the proper permissions to edit a taxonomy (60ms)
    DELETE /api/roles/:id
      ✓ it should not be possible to delete a Taxonomy when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_role' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
      ✓ it should not allow a user without the proper permissions to delete a taxonomy (63ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 5;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 5;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): DELETE FROM `Roles` WHERE `id` = '6'
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should allow a user with the proper permissions to delete a taxonomy (66ms)
    POST /api/roles/:id/capability
      ✓ it should not be possible to add a capability by a guest user
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`id` = 1;
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`id` = '99';
      ✓ it should not be possible to add a capability to a non existing role (59ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Capabilities` AS `Capability` WHERE `Capability`.`id` = 1;
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`id` = '7';
Executing (default): SELECT `createdAt`, `updatedAt`, `CapabilityId`, `RoleId` FROM `RoleCapability` AS `RoleCapability` WHERE `RoleCapability`.`RoleId` = 7 AND `RoleCapability`.`CapabilityId` IN (1);
      ✓ it should be possible to add a capability to a role by an admin user (68ms)
    DELETE /api/roles/:id/capability/:capability
Executing (default): INSERT INTO `RoleCapability` (`createdAt`,`updatedAt`,`CapabilityId`,`RoleId`) VALUES ('2020-11-04 09:53:48.349 +00:00','2020-11-04 09:53:48.349 +00:00',1,7);
      ✓ it should not be possible to remove a capability from a role by a guest user
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `slug`, `name`, `createdAt`, `updatedAt` FROM `Roles` AS `Role` WHERE `Role`.`id` = '7';
Executing (default): DELETE FROM `RoleCapability` WHERE `RoleId` = 7 AND `CapabilityId` IN ('1')
      ✓ it should be possible to remove a capability from a role by an admin user (61ms)

  Taxonomy
Executing (default): DELETE FROM `Taxonomies`; DELETE FROM `sqlite_sequence` WHERE `name` = 'Taxonomies';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_taxonomy';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@taxonomy.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
    GET /api/taxonomies
Executing (default): SELECT `id`, `createdAt`, `active`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = 1;
      ✓ it should GET all the taxonomies
    POST /api/taxonomies
      ✓ it should not be possible to add a Taxonomy when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a taxonomy without required fields (55ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_taxonomy' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
      ✓ it should not allow a user without the proper permissions to add a taxonomy (61ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Taxonomies` (`id`,`parent`,`active`,`type`,`createdAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a taxonomy (61ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Taxonomies` (`id`,`parent`,`active`,`type`,`createdAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a different taxonomy (63ms)
    PATCH /api/taxonomies/:id
      ✓ it should not be possible to edit a Taxonomy when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_taxonomy' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
      ✓ it should not allow a user without the proper permissions to edit a taxonomy (62ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): UPDATE `Taxonomies` SET `type`=$1 WHERE `id` = $2
Executing (default): SELECT `id`, `createdAt` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`id` = '2';
      ✓ it should allow a user with the proper permissions to edit a taxonomy (68ms)
    GET /api/taxonomies/:id
Executing (default): SELECT `id`, `createdAt`, `active`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`id` = '2';
Executing (default): SELECT `id`, `createdAt`, `active`, `type` FROM `Taxonomies` AS `Taxonomy` WHERE `Taxonomy`.`parent` = '2';
      ✓ it should display Taxonomy information
    DELETE /api/taxonomies/:id
      ✓ it should not be possible to delete a Taxonomy when not logged in
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_taxonomy' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
      ✓ it should not allow a user without the proper permissions to delete a taxonomy (60ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 6;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 6;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): DELETE FROM `Taxonomies` WHERE `id` = '2'
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should allow a user with the proper permissions to delete a taxonomy (69ms)

  Text
Executing (default): DELETE FROM `Texts`; DELETE FROM `sqlite_sequence` WHERE `name` = 'Texts';
Executing (default): DELETE FROM `LearningUnits`; DELETE FROM `sqlite_sequence` WHERE `name` = 'LearningUnits';
Executing (default): DELETE FROM `KnowledgeUnits`; DELETE FROM `sqlite_sequence` WHERE `name` = 'KnowledgeUnits';
Executing (default): DELETE FROM `Languages`; DELETE FROM `sqlite_sequence` WHERE `name` = 'Languages';
Executing (default): INSERT INTO `LearningUnits` (`id`,`createdAt`) VALUES (NULL,$1);
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'user_text';
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'user@text.com';
Executing (default): INSERT INTO `Users` (`id`,`username`,`email`,`password`,`allowBasicLog`,`allowLogResearch`,`activationCode`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8);
Executing (default): UPDATE `Users` SET `active`=$1,`updatedAt`=$2 WHERE `username` = $3
Executing (default): INSERT INTO `KnowledgeUnits` (`id`,`LearningUnitId`,`UserId`,`suitableBlind`,`suitableDeaf`,`suitableDumb`,`publish`,`review`,`lectorate`,`visiblePublic`,`visibleLexicon`,`visibleCourses`,`createdAt`) VALUES (NULL,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12);
Executing (default): INSERT INTO `Languages` (`id`,`code`,`name`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
    GET /api/texts
Executing (default): SELECT `id`, `createdAt` FROM `Texts` AS `Text`;
      ✓ it should GET all the texts
    POST /api/texts
      ✓ it should not be possible to add a Text when not logged in
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'user_text' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 7;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 7;
      ✓ it should not allow a user without the proper permissions to add a Text (54ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 7;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 7;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
      ✓ it should display an error when adding a Text without required fields (62ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Texts` (`id`,`LanguageId`,`KnowledgeUnitId`,`content`,`createdAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a Text (74ms)
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): SELECT `id`, `username`, `password`, `titlePrefix`, `titleSuffix`, `description`, `firstName`, `birthdate`, `lastName`, `studyId`, `country`, `website`, `picture`, `street`, `email`, `phone`, `city`, `zip` FROM `Users` AS `User` WHERE `User`.`username` = 'admin' AND `User`.`active` = 1;
Executing (default): UPDATE `Users` SET `lastLogin`=CURRENT_TIMESTAMP,`updatedAt`=$1 WHERE `username` = $2
Executing (default): SELECT `id`, `username`, `email`, `privacyLevelLog`, `privacyLevelProfile`, `password`, `firstName`, `lastName`, `titlePrefix`, `titleSuffix`, `birthdate`, `studyId`, `phone`, `street`, `zip`, `city`, `country`, `state`, `website`, `picture`, `description`, `lastLogin`, `acceptPrivacy`, `acceptTos`, `allowBasicLog`, `allowLogResearch`, `allowLogSharing`, `allowLogReports`, `showProfilePublic`, `showProfileStudents`, `showProfileTeachers`, `activationCode`, `active`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = 1;
Executing (default): SELECT `Role`.`id`, `Role`.`slug`, `Role`.`name`, `Role`.`createdAt`, `Role`.`updatedAt`, `UserRole`.`createdAt` AS `UserRole.createdAt`, `UserRole`.`updatedAt` AS `UserRole.updatedAt`, `UserRole`.`UserId` AS `UserRole.UserId`, `UserRole`.`RoleId` AS `UserRole.RoleId` FROM `Roles` AS `Role` INNER JOIN `UserRole` AS `UserRole` ON `Role`.`id` = `UserRole`.`RoleId` AND `UserRole`.`UserId` = 1;
Executing (default): SELECT `Capability`.`id`, `Capability`.`slug`, `Capability`.`name`, `Capability`.`createdAt`, `Capability`.`updatedAt`, `RoleCapability`.`createdAt` AS `RoleCapability.createdAt`, `RoleCapability`.`updatedAt` AS `RoleCapability.updatedAt`, `RoleCapability`.`CapabilityId` AS `RoleCapability.CapabilityId`, `RoleCapability`.`RoleId` AS `RoleCapability.RoleId` FROM `Capabilities` AS `Capability` INNER JOIN `RoleCapability` AS `RoleCapability` ON `Capability`.`id` = `RoleCapability`.`CapabilityId` AND `RoleCapability`.`RoleId` = 1;
Executing (default): INSERT INTO `Texts` (`id`,`LanguageId`,`KnowledgeUnitId`,`content`,`createdAt`) VALUES (NULL,$1,$2,$3,$4);
      ✓ it should allow a user with the proper permissions to add a different Text (74ms)
    GET /api/texts/:id
Executing (default): SELECT `Text`.`id`, `Text`.`content`, `Text`.`prevId`, `Text`.`nextId`, `Text`.`rootId`, `Language`.`id` AS `Language.id`, `Language`.`code` AS `Language.code`, `Language`.`name` AS `Language.name` FROM `Texts` AS `Text` LEFT OUTER JOIN `Languages` AS `Language` ON `Text`.`LanguageId` = `Language`.`id` WHERE `Text`.`id` = '2';
Executing (default): SELECT `id` FROM `Texts` AS `Text` WHERE `Text`.`rootId` = 2 AND `Text`.`nextId` IS NULL;
      ✓ it should display Text information
    DELETE /api/texts/:id
Executing (default): DELETE FROM `Texts` WHERE `id` = '2'
      ✓ it should be possible to delete a Text


  86 passing (4s)
  3 failing

  1) LearningUnit
       DELETE /api/learningUnits/:id
         it should not be possible to delete a Learning unit when not logged in:

      Uncaught AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 401 but got 404
      + expected - actual

      -404
      +401
      
      at /home/chris/work/lerndorf/server/test/learningUnits.js:198:27
      at Test.Request.callback (node_modules/superagent/lib/node/index.js:716:12)
      at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)
      at endReadableNT (_stream_readable.js:1187:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21)

  2) LearningUnit
       DELETE /api/learningUnits/:id
         it should not allow a user without the proper permissions to delete a learning Unit:

      Uncaught AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 403 but got 404
      + expected - actual

      -404
      +403
      
      at /home/chris/work/lerndorf/server/test/learningUnits.js:214:31
      at Test.Request.callback (node_modules/superagent/lib/node/index.js:716:12)
      at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)
      at endReadableNT (_stream_readable.js:1187:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21)

  3) LearningUnit
       DELETE /api/learningUnits/:id
         it should allow a user with the proper permissions to delete a learning Unit:

      Uncaught AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 404
      + expected - actual

      -404
      +200
      
      at /home/chris/work/lerndorf/server/test/learningUnits.js:233:35
      at Test.Request.callback (node_modules/superagent/lib/node/index.js:716:12)
      at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)
      at endReadableNT (_stream_readable.js:1187:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21)



-----------------------------|---------|----------|---------|---------|-----------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s           
-----------------------------|---------|----------|---------|---------|-----------------------------
All files                    |   75.25 |    39.23 |   70.51 |   75.49 |                             
 server                      |     100 |    83.33 |     100 |     100 |                             
  index.js                   |     100 |    66.67 |     100 |     100 | 12                          
  logger.js                  |     100 |      100 |     100 |     100 |                             
  server.js                  |     100 |      100 |     100 |     100 |                             
 server/config               |   90.22 |    57.14 |    87.5 |   90.22 |                             
  babelHook.js               |     100 |      100 |     100 |     100 |                             
  passport.js                |      80 |       50 |   91.67 |      80 | 38,55,71-75,128             
  routes.js                  |   95.45 |      100 |      50 |   95.45 | 14                          
  sequelize.js               |     100 |      100 |     100 |     100 |                             
 server/helpers              |   58.96 |       25 |   37.93 |   57.76 |                             
  auth.js                    |   27.78 |    13.33 |   19.05 |   26.98 | ...,109-113,117-135,139-168 
  taxonomies.js              |     100 |      100 |     100 |     100 |                             
  utils.js                   |      80 |       50 |      80 |      75 | 11-13,22                    
 server/models               |     100 |      100 |     100 |     100 |                             
  Capability.js              |     100 |      100 |     100 |     100 |                             
  File.js                    |     100 |      100 |     100 |     100 |                             
  KnowledgeUnit.js           |     100 |      100 |     100 |     100 |                             
  KnowledgeUnitUserRating.js |     100 |      100 |     100 |     100 |                             
  Language.js                |     100 |      100 |     100 |     100 |                             
  LearningUnit.js            |     100 |      100 |     100 |     100 |                             
  LearningUnitLanguage.js    |     100 |      100 |     100 |     100 |                             
  LearningUnitRelation.js    |     100 |      100 |     100 |     100 |                             
  LearningUnitTag.js         |     100 |      100 |     100 |     100 |                             
  LogUser.js                 |     100 |      100 |     100 |     100 |                             
  Role.js                    |     100 |      100 |     100 |     100 |                             
  RoleLanguage.js            |     100 |      100 |     100 |     100 |                             
  Taxonomy.js                |     100 |      100 |     100 |     100 |                             
  TaxonomyLanguage.js        |     100 |      100 |     100 |     100 |                             
  Text.js                    |     100 |      100 |     100 |     100 |                             
  User.js                    |     100 |      100 |     100 |     100 |                             
 server/routes               |   67.49 |    39.19 |   67.41 |   67.67 |                             
  capabilities.js            |     100 |      100 |     100 |     100 |                             
  files.js                   |   78.57 |    33.33 |   86.67 |   78.57 | 71-103                      
  knowledgeUnits.js          |   94.29 |      100 |   88.24 |   94.12 | 52-54                       
  languages.js               |     100 |      100 |     100 |     100 |                             
  learningUnits.js           |   45.83 |       30 |   34.78 |   47.14 | ...,318-332,336-342,351-367 
  roles.js                   |   81.67 |    56.25 |     100 |   81.67 | ...2-63,133-145,176-180,199 
  taxonomies.js              |   93.75 |       75 |   85.71 |   93.75 | 45-47                       
  texts.js                   |   68.29 |       40 |      60 |   68.29 | 35-37,77,93-119             
  users.js                   |   36.05 |    16.67 |   26.09 |   35.29 | ...,224-246,259-277,285-288 
-----------------------------|---------|----------|---------|---------|-----------------------------
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
